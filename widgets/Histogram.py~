from collections import defaultdict
import numpy as np

class Histogram(object):
    def __init__(self, ritual, boxColors, images, initRange, **ignore):
        self.ritual = ritual
        self.boxColors = boxColors
        self.imageIds = ritual.__dict__[images]
        self.x0 = initRange[0]
        self.w = initRange[1] - initRange[0]
        self.data = []

    def from_client(self, data, ip):
        imgId = self.imageIds.get(ip, 0)
        x = int(data['x'])
        self.data.append({'x':x,'imgId':imgId})
        self.x0 = min(self.x0, x)
        self.w = max(self.w, x-self.x0)

    def to_client(self, have):
        wi = self.w // 20
        y = np.zeros(self.w+wi, 'float32')
        outimgs = []
        for i in self.data:
            imgId = i['imgId']
            x = (i['x']-self.x0) - wi//2
            h = 5 / self.ritual.jpgrats[imgId]
            base = y[x:x+w].min()
            y[x:x+w] = base + h
            xm = x * 100 / (self.w+wi)
            outimgs.append({'imgId':imgId, 'x':xm, 'y':base, 'w':wi, 'h':h})
        dx = w / 10
        dxexp = 10 ** int(np.log(dx)/np.log(10))
        dxm = dx / dxexp
        if dxm < 1.4:
            dxm = 1
        elif dxm < 2.5:
            dxm = 2
        else:
            dxm = 5
        dx = dxm * dxexp
        axs = np.ceil(self.x0/dx)*dx
        xaxv = range(axs, self.x0+self.w, dx)
        xax = [ {"x":(v-self.x0) * 100 / (self.w+wi), "v":v} for v in xaxv ]
        return {
            "widget": "Histogram",
            "boxColors": self.boxColors,
            "data": outimages,
            "xaxes": xax
        }
            
            
